name: Build & Release

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
      - develop
  push:
    branches:
      - master
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # Use the OCI format (type=oci) instead of Docker format (type=docker) because
    # the Docker exporter does not support exporting manifest lists, which are required
    # for multi-platform builds (e.g., amd64, arm64).
    - name: Build and Export Image
      uses: docker/build-push-action@v6
      with:
        file: docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: false
        outputs: type=oci,dest=/tmp/myimage.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload Built Image as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: myimage
        path: /tmp/myimage.tar

  release:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      release-version: ${{ steps.semantic_release.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install Semantic Release
        run: |
          npm install semantic-release @semantic-release/github --save-dev
          npm install conventional-changelog-eslint --save-dev

      # https://github.com/semantic-release/semantic-release/issues/1592#issuecomment-902533435
      # Semantic-release doesn't support pathing to a config file unless using a .js config:
      # instead copy the file to the root as a workaround to maintain workflow separation
      - name: Copy Release Config to Root
        run: |
          cp .github/.releaserc ./

      # Ensure that only one alpha pre-release is active at a time by deleting the latest pre-release 
      # and its corresponding tag on the 'develop' branch. This avoids clutter from multiple alpha 
      # releases after each merge into the develop branch.
      - name: Delete Existing Pre-release and Tag (Develop Branch Only)
        if: github.ref == 'refs/heads/develop'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_prerelease_tag=$(gh release list --limit 1 --json tagName,isPrerelease \
            --jq '.[] | select(.isPrerelease) | .tagName')

          if [ -n "$latest_prerelease_tag" ]; then
            gh release delete "$latest_prerelease_tag" --yes --cleanup-tag
          fi

      - name: Semantic Release (Dry Run for PRs)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --ci --dry-run

      - name: Semantic Release (Full Release on Push)
        id: semantic_release
        if: ${{ github.event_name == 'push' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: semantic-release:*
        run: npx semantic-release --ci

      # https://semantic-release.gitbook.io/semantic-release/usage/workflow-configuration#pre-release-branches
      # Semantic-release appends a numerical suffix to all pre-releases by default (e.g., `v0.0.1-alpha.1`).
      # Currently, this behavior is not configurable via CLI or the release config. For improved readability 
      # and consistency, this step renames the tag and associated release by removing the numerical suffix
      # from the alpha pre-release (e.g., renaming `v0.0.1-alpha.1` to `v0.0.1-alpha`).
      - name: Rename Alpha Release Tag (Develop Branch Only)
        if: github.ref == 'refs/heads/develop'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName,isPrerelease --jq '.[] | select(.isPrerelease) | .tagName')
          if [[ $latest_tag == *"-alpha."* ]]; then
            new_tag=${latest_tag%-alpha.*}-alpha
            new_name="Release ${new_tag}"
            gh release edit "$latest_tag" --tag "$new_tag" --title "$new_name"
            git tag $new_tag $latest_tag  # Create the new tag pointing to the same commit
            git tag -d $latest_tag  # Delete the old tag locally
            git push origin $new_tag  # Push the new tag to the remote
            git push origin :refs/tags/$latest_tag  # Delete the old tag on the remote
          fi

      - name: Extract Release Version
        id: extract_version
        run: echo "RELEASE_VERSION=${{ steps.semantic_release.outputs.version }}" >> $GITHUB_ENV
  
  publish:
    runs-on: ubuntu-latest
    needs: [build, release]
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Download Built OCI Image
        uses: actions/download-artifact@v3
        with:
          name: myimage
          path: /tmp
  
      - name: Install Crane
        uses: imjasonh/setup-crane@v0.1
  
      - name: Authenticate Crane for GitHub Container Registry
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | crane auth login ghcr.io --username ${{ github.actor }} --password-stdin
  
      - name: Push OCI Image to Registry
        run: |
          crane push /tmp/myimage.tar ghcr.io/${{ github.repository }}:${{ needs.release.outputs.release-version }}
          crane push /tmp/myimage.tar ghcr.io/${{ github.repository }}:latest